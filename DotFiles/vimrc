"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"%%%%%%%%%%%%%%%%%%%%%%%%ALEX HAHN'S VIMRC%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



"TODO:
"       -embed script "setcolors.vim" inside of this .vimrc? that way <F8>
"       always toggles between all avaible color schemes? ... this might take
"       an hour or so

"       TOC (Table of Contents): Sections
"-----------------------------------------------------------------------------
"   0) TODO's
"   1) The No Brainers
"   2) Color Schemes
"   3) Tabs And Spaces
"   4) Search/Find And Replace
"   5) Visual Aids and some Formatting
"   6) Getting Pro At Vim (probably aliases, tips, definitely good to look at
"   and ponder)
"-----------------------------------------------------------------------------


" 0) TODO's
"-----------------------------------------------------------------------------
"TODO:
"       -Comment all uncommented command/ lines
"       -Unit testing
"       -See if order matters for each command (put in front then back)
"       -embed script "setcolors.vim" inside of this .vimrc? that way <F8>
"        always toggles between all available color schemes? ... this might
"        take an hour or so
"       -Make a "Profiles" folder on local machine and point symbolic files of
"       profiles (.vimrc, .bashrc, etc) and put on github



" 1) THE NO BRAINERS (MUST HAVES!)
"-----------------------------------------------------------------------------
set nocompatible

"Turn on line numbers... a must have
set number

"Syntax highlighting, clutch
syntax on

"Turn on autocomplete for vim (https://github.com/ajh17/VimCompletesMe)
"autocmd FileType vim let b:vcm_tab_complete = 'vim'

" Comment single lines with Ctrl+j dynamic on filetype
noremap <C-j> :<S-Left>exe "<S-Right>normal! I".b:commentType<CR>

autocmd BufReadPost *.[ch] let b:commentType='//' "C files
autocmd BufReadPost *.pl let b:commentType='#'    "Perl files
autocmd BufReadPost *.py let b:commentType='#'    "Perl files


"turn on plugin files
filetype plugin on

filetype plugin indent on

"set up vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"let Vundle manage Vundle
Plugin 'gmarik/Vundle.vim'




" 700 lines history in the vimrc (can see in some meta files)
set history=700

" Turn on pathogen for easy install and runtime of plugins
execute pathogen#infect()

let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
let g:haskell_backpack = 1                " to enable highlighting of backpack keywords


" Use english for spellchecking, use  spellcheck by default
if version >= 700
    set spl=en spell
endif

"Basic character pair completion (Autoclose parens/brackets/braces, etc)
"http://vim.wikia.com/wiki/Automatically_append_closing_characters
inoremap {      {}<Left>
inoremap {<CR>  {<CR>}<Esc>O
inoremap {{     {
inoremap {}     {}
inoremap        (  ()<Left>

inoremap <expr> )  strpart(getline('.'), col('.')-1, 1) == ")" ? "\<Right>" : ")"
inoremap <expr> }  strpart(getline('.'), col('.')-1, 1) == "}" ? "\<Right>" : "}"
"'inoremap <expr> ' strpart(getline('.'), col('.')-1, 1) == "\'" ? "\<Right>" : "\'\'\<Left>"

"Scroll kicks in with this many lines as a buffer (both up and down scrolling)
set so=10

"2) Colorschemes
"-----------------------------------------------------------------------------
"Uncomment one of the color schemes. Make sure that you have the .vim/colors/
"library and corresponding schemes installed

"=======================
" Custom Colorschemes
"=======================
colorscheme gruvbox
"colorscheme badwolf

"=======================
" Built in Colorschemes
"=======================
"colorscheme blue
"colorscheme koehler
"colorscheme Malokai


" Make sure colorscheme/ background loads in as dark mode if option exists
set bg=dark

"   3) Tabs And Spaces
"-----------------------------------------------------------------------------
""Instead of annoying tab characters (jumps a bunch of spaces, hard to control)
"we equivalently insert a certain number of spaces characters (spaces)
"which gives us more maneuverability
set expandtab

"This controls how many spaces hitting tab moves over (remember tabstop now
"makes these actual spaces rather than jumps!)
set tabstop=2

"Uses tabs better, ie shiftwith instead of tab stop at the start of lines (then
"switches), I think this also might change and auto format differently for
"different file types (extensions) which would be pretty cool but idk for sure
set smarttab

"Set the number of space characters inserted for indentation
set shiftwidth=2

"Proper PEP 8 (python) indentation
"au BufNewFile,BufRead *.py
    "\ set tabstop=4
    "\ set softtabstop=4
    "\ set shiftwidth=4
    "\ set textwidth=79
    "\ set expandtab
    "\ set autoindent
    "\ set fileformat=unix

"For fullstack development
"au BufNewFile,BufRead *.js, *.html, *.css
    "\ set tabstop=2
    "\ set softtabstop=2
    "\ set shiftwidth=2

"This simply keeps indentation from the previous line, very useful for keeping
"the syntax of code blocks consistent
set autoindent

"Usually pretty good but sometimes certain key words cause unintended indents
"(not too crazy inconvenient though), supports smart indenting of common PL's.
"New line also triggers indent which can be convenient or annoying
set smartindent

set formatoptions=tcrql "Auto formatting and  wrapping lines
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann

" Turn off highlights in search when done with <Control> - L
nnoremap <C-L> :nohl<CR><C-L>

" Set backspace to work more appropriately
set backspace=indent,eol,start

"   4) Search, Find, and Replace
"-----------------------------------------------------------------------------
"case insensitive search/find/replace (? / stuff). Kind of funny that there's
"a set noic / set noignorecase option lol... double negatives ftw. Also note
"that smartcase doesn't really ever hurt this like some people preach; lower
"case searches are case insensitive by default, only when you include a capital
"does the case sensitivity kick in as set below by "set smartcase"
set ignorecase

"Messes with buffers and writing, good idea to have. With this opening a new
"file when the current buffer has unsaved changes causes files to be hidden
"instead of closed (and no â€˜No write since last change (add ! to override)'
"error. All unsaved changes can still be accessed by typing :ls and then :b[N],
"where [N] is the number of a buffer (look online for buffer tutorial stuff)
set hidden

"same as:
"set hid

"Only search by case sensitivity IF the search term has at least one capital in
"it, ie search "turnt" will find "TuRnT" but search "Turnt" won't find "turnt"
set smartcase

" A more informative grep
set grepprg=grep\ -nH\ $*

"By default, searching starts after you enter the string, with incsearch it
"searches incrementally with the first character and refines as you go!
set incsearch

"Turns on search highlighting, great feature
set hlsearch

"Visual mode pressing * or # searches for the current selection
""Pretty useful - credit to Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

"Map <C-L> (redraw screen) to also turn off search highlighting until the
""next search I just use the ctrl l config set earlier


"   4) Visual Aids and Formatting
"-----------------------------------------------------------------------------

"A little more of a controversial but potentially helpful command, showmatch
"causes vim to move the cursor to previos matching bracket ([{}]) for a quick
"moment and pressing any other key will quickly ignore it so rapid typing is not
"interupted
set showmatch

""set the momentary duration of showmatch (in tenths of a second)
set matchtime=4

set bg=dark

"highlights the current line the cursor is on
set cursorline

"Highlight in red if surpass 80 character limit (mainly for coding/style...
"especially if you're a kernal developer!)
highlight Overlength ctermbg=red ctermfg=white guibg=#592929
match Overlength /\%80v.\+/

"Display line and character location
set ruler

""set how wide lines can be (how many characters) note that the higlighting 80+
"lines code might be unnecessary with this (edit: still effective)
set textwidth=80

"Same as Using shortcut tw=__
"set tw=80

"Very useful if you're using textwidth, automatically gets as close to the limit
"as possible without going over
set formatoptions+=t

""set how autoformatting is done: t=textwidth, c=comments, q=allow 'gq' to
"work, r=(in mail) comment leader after
"set formatoptions=tcql

""Another more robust over 80 char highlighting command: once again... use when
"best (uncomment to use):
""augroup vimrc_autocmds
"    autocmd BufEnter * highlight OverLength ctermbg=red
"    "    autocmd BufEnter * match OverLength /\%80v.*/
"    "augroup END

"Set the command window height to 2 lines (many times you actually have to hit
"enter to view continue\finish viewing)
set cmdheight=2

"   5) Getting Pro at Vim
"-----------------------------------------------------------------------------

let mapleader = ","
let g:mapleader = ","


"(disable arrows in command mode)
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

"(disable arrows in insert mode)
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

"For saving and quitting fix the case sensitivity that often throws a "Not an
"editor command error"
command W w
command Q q
command Wq wq
command WQ wq

"make jk escape insert mode (way better than ESC)
imap jk <ESC>
imap JK <ESC>
imap Jk <ESC>
imap jK <ESC>

"sometimes I hit the wrong colon vs semi colon... but I always want cmd mode
nmap ; :

"split navigations ctrl j moves to split below, ctrl l move to split to the
"right, etc)
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"Command line tab completion
set wildmenu

"uhhhh
nmap <leader>w :w!<cr>

"First tab will complete the longest common string and will invoke wildmenu
"(horizontal and not that obstructive), the next tab will complete the first
"alternative and will then cycle through the rest
set wildmode=list:longest:full

"Show the characters in the command as you go
set showcmd

"It sucks when h/l don't go to the next line if there's a line break... this
"fixes that
set whichwrap+=<,>,h,l,[,]

"Stop certain movements from always going to the first character of the line
"(instead go to actual non whitespace). Pretty handy and usually what most of
"the time (if not all the time). Most other text editors have this
set nostartofline

"Identify and color bad whitespace in python files
"au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

"Ensure UTF-8 encoding
set encoding=utf-8


"Always display the status line, even if only one window is displayed
set laststatus=2

"Attempt to determine the type of a file based on its name and possibly
"contents. Helps auto-indenting for each filetype and for plugins that are
"filetype specific
"filetype indent plugin on

"Is this the same as having these two commands turned on?:
"filetype plugin on
"filetype indent on
"And this one?
"filetype on

"Instead of failing a command because of unsaved changes, instead raise a
"dialogue asking if you wish to save changed files
set confirm

"Use a visual bell instead of audio (...not actually a huge fan of this one,
"but I guess with no sound it be helpful, uncomment for it)
set visualbell

"Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

"Use <f11> to toggle between 'paste and 'nopaste'. I actually don't use this
"much but maybe I should...
set pastetoggle=<F11>

"Map Y to act like D and C, ie to yank until EOL rather than act like yy wich
"is default (maybe this is useful though?)
map Y y

"Commenting this out, I don't actually use
"Automatically remove all trailing whitespace before saving (THIS CAN BE
"DANGEROUS BY ITSELF, SOMETIMES FILES NEED TRAILING WHITESPACE!)
"autocmd BufWritePre * :%s/\s\+$//e

"so instead let's just do that with certain filetypes only!
autocmd FileType c,ccp,java,php autocmd BufWritePre <buffer> : %s/\s\+$//e

"Remove any trailing whitespace that is in the file
"autocmd Bufread,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif

"Automatically change the working directory to the location of the file being
"edited. (sometimes doesn't work for certain files/ plugins, see
"preceeding comments)
set autochdir



"When F5 is pressed, a numbered list of file names (buffered) is printed, the
"users simply hits the number of the buffer he wants to go to and hits enter
nnoremap <F5> :buffers<CR>:buffer<Space>

"tear off the buffer menu to make an always available list of buffers
set wildchar=<Tab> wildmenu wildmode=full

"F10 also opens the buffer menu:
set wildcharm=<C-z>
nnoremap <F10> :b <C-z>

" Additional python indentation PEP 8 plugin
"Plugin 'vim-scripts/indentpython.vim'

" Enable code folding
set foldmethod=indent
set foldlevel=99

"Enable folding with the space bar
nnoremap <space> za

"Better folding plugin
Plugin 'tmhedberg/SimpylFold'


"Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
"Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}

"see the docstring for folded code
let g:SimpylFold_docstring_preview=1

" Specify a directory for plugins
call plug#begin('~/.vim/plugged')
"Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}
"Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
"End Plug section
call plug#end()




" All of your Plugins must be added before the following line
call vundle#end()
filetype plugin indent on

" if hidden is not set, TextEdit might fail.
set hidden

" Better display for messages
set cmdheight=2

" Smaller updatetime for CursorHold & CursorHoldI
"set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
"set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` for navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
"autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
vmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` for format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` for fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)


" Add diagnostic info for https://github.com/itchyny/lightline.vim
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status'
      \ },
      \ }



" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
